package com.feedverse.userservices.model;

import java.time.LocalDateTime;

import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.feedverse.userservices.dto.UserDetailsDTO;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;

@Entity
public class DBUser {

    // @Id // The ID field, auto-generated by Neo4j
    // private String id;

    @Column(unique = true)
    private String email;

    @Id()
    private String username;

    private String name;
    private String role;
    private LocalDateTime creationDate;
    private boolean privateProfile;
    // Connections where this user is the source (this user follows others)
    @OneToMany(mappedBy = "source")
    @JsonManagedReference
    private Set<Connection> following;
    // Connections where this user is the target (this user is followed by others)
    @OneToMany(mappedBy = "target")
    @JsonManagedReference
    private Set<Connection> followers;

    // Constructors, getters, setters

    public DBUser() {
        creationDate = LocalDateTime.now();
        privateProfile = false;
        this.followers = new HashSet<>();
        this.following = new HashSet<>();
    }

    public DBUser(String email, String username, String name, String role, Set<Connection> following,
            Set<Connection> followers) {
        this();
        this.email = email;
        this.username = username;
        this.name = name;
        this.role = role;
        this.following = following;
        this.followers = followers;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public Set<Connection> getFollowing() {
        return following;
    }

    public Set<Connection> getFollowers() {
        return followers;
    }

    public Set<UserDetailsDTO> getDetailedFollowing() {
        return following.stream()
                .map(connection -> new UserDetailsDTO(connection.getTarget()))
                .collect(Collectors.toSet());
    }

    public Set<UserDetailsDTO> getDetailedFollowers() {
        return followers.stream()
                .map(connection -> new UserDetailsDTO(connection.getSource()))
                .collect(Collectors.toSet());
    }

    public void setFollowing(Set<Connection> following) {
        this.following = following;
    }

    public void setFollowers(Set<Connection> followers) {
        this.followers = followers;
    }

    public LocalDateTime getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(LocalDateTime creationDate) {
        this.creationDate = creationDate;
    }
    // Additional constructors, getters and setters for all fields

    // Add a method to follow another user
    public void follow(Connection user) {
        following.add(user);
    }

    // Add a method to unfollow another user
    public void unfollow(Connection user) {
        following.remove(user);
    }

    public void addFollower(Connection user) {
        followers.add(user);
    }

    public void removeFollower(Connection user) {
        followers.remove(user);
    }

    public boolean isPrivateProfile() {
        return privateProfile;
    }

    public void setPrivateProfile(boolean privateProfile) {
        this.privateProfile = privateProfile;
    }

    @Override
    public String toString() {
        return "DBUser [email=" + email + ", username=" + username + ", name=" + name + ", role=" + role
                + ", creationDate=" + creationDate + ", privateProfile=" + privateProfile + ", following=" + following
                + ", followers=" + followers + "]";
    }

}
